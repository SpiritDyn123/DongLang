
// Generated from D:/studyCode/DongLang/font/antlr4/DongLang.g4 by ANTLR 4.13.1


#include "DongLangLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct DongLangLexerStaticData final {
  DongLangLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  DongLangLexerStaticData(const DongLangLexerStaticData&) = delete;
  DongLangLexerStaticData(DongLangLexerStaticData&&) = delete;
  DongLangLexerStaticData& operator=(const DongLangLexerStaticData&) = delete;
  DongLangLexerStaticData& operator=(DongLangLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag donglanglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
DongLangLexerStaticData *donglanglexerLexerStaticData = nullptr;

void donglanglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (donglanglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(donglanglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<DongLangLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "FUNC", 
      "RETURN", "VOID", "TRUE", "FALSE", "FOR", "BREAK", "CONTINUE", "IF", 
      "ELSE", "ELIF", "POINTADDR", "COND_AND", "COND_OR", "COND_NOT", "POINT", 
      "INCREMENT", "DECREMENT", "COND_SPE", "ADD", "SUB", "MUL", "DIV", 
      "OR", "XOR", "NOT", "CMP_EQ", "CMP_NE", "CMP_GT", "CMP_LT", "CMP_GE", 
      "CMP_LE", "SPACE", "LINE_COMMENT", "COMMENT", "IDENTIFIER", "NUMBER", 
      "ALPHA_DIGIT", "ALPHA", "DIGIT", "NULL", "STRING_LITERAL", "FSTAR", 
      "EscapeSequence", "HexDigit"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "'extern'", "'C'", "'{'", "'}'", "','", "'...'", 
      "'['", "']'", "'int'", "'string'", "'float'", "'bool'", "'byte'", 
      "'='", "'func'", "'return'", "'void'", "'true'", "'false'", "'for'", 
      "'break'", "'continue'", "'if'", "'else'", "'elif'", "'&'", "'&&'", 
      "'||'", "'!'", "", "'++'", "'--'", "';'", "'+'", "'-'", "", "'/'", 
      "'|'", "'^'", "'~'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
      "", "", "", "", "", "", "", "", "'NULL'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "FUNC", "RETURN", "VOID", "TRUE", "FALSE", "FOR", "BREAK", "CONTINUE", 
      "IF", "ELSE", "ELIF", "POINTADDR", "COND_AND", "COND_OR", "COND_NOT", 
      "POINT", "INCREMENT", "DECREMENT", "COND_SPE", "ADD", "SUB", "MUL", 
      "DIV", "OR", "XOR", "NOT", "CMP_EQ", "CMP_NE", "CMP_GT", "CMP_LT", 
      "CMP_GE", "CMP_LE", "SPACE", "LINE_COMMENT", "COMMENT", "IDENTIFIER", 
      "NUMBER", "ALPHA_DIGIT", "ALPHA", "DIGIT", "NULL", "STRING_LITERAL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,58,406,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,
  	1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
  	1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
  	1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,
  	1,47,1,47,1,48,4,48,291,8,48,11,48,12,48,292,1,48,1,48,1,49,1,49,1,49,
  	1,49,5,49,301,8,49,10,49,12,49,304,9,49,1,49,1,49,1,50,1,50,1,50,1,50,
  	5,50,312,8,50,10,50,12,50,315,9,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,
  	5,51,324,8,51,10,51,12,51,327,9,51,1,52,1,52,5,52,331,8,52,10,52,12,52,
  	334,9,52,1,52,3,52,337,8,52,1,52,1,52,4,52,341,8,52,11,52,12,52,342,3,
  	52,345,8,52,1,53,1,53,3,53,349,8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
  	1,56,1,56,1,57,1,57,1,57,5,57,363,8,57,10,57,12,57,366,9,57,1,57,1,57,
  	1,57,1,57,5,57,372,8,57,10,57,12,57,375,9,57,1,57,3,57,378,8,57,1,58,
  	1,58,1,59,1,59,1,59,1,59,3,59,386,8,59,1,59,3,59,389,8,59,1,59,1,59,1,
  	59,4,59,394,8,59,11,59,12,59,395,1,59,1,59,1,59,1,59,1,59,3,59,403,8,
  	59,1,60,1,60,1,313,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
  	45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	56,113,57,115,58,117,0,119,0,121,0,1,0,10,3,0,9,10,13,13,32,32,2,0,10,
  	10,13,13,1,0,49,57,2,0,65,90,97,122,1,0,48,57,4,0,10,10,13,13,34,34,92,
  	92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,48,
  	51,1,0,48,55,3,0,48,57,65,70,97,102,421,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
  	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
  	0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
  	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
  	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
  	0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
  	1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
  	0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
  	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
  	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
  	0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,
  	0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,123,1,0,0,0,3,125,1,0,0,0,5,127,1,0,
  	0,0,7,134,1,0,0,0,9,136,1,0,0,0,11,138,1,0,0,0,13,140,1,0,0,0,15,142,
  	1,0,0,0,17,146,1,0,0,0,19,148,1,0,0,0,21,150,1,0,0,0,23,154,1,0,0,0,25,
  	161,1,0,0,0,27,167,1,0,0,0,29,172,1,0,0,0,31,177,1,0,0,0,33,179,1,0,0,
  	0,35,184,1,0,0,0,37,191,1,0,0,0,39,196,1,0,0,0,41,201,1,0,0,0,43,207,
  	1,0,0,0,45,211,1,0,0,0,47,217,1,0,0,0,49,226,1,0,0,0,51,229,1,0,0,0,53,
  	234,1,0,0,0,55,239,1,0,0,0,57,241,1,0,0,0,59,244,1,0,0,0,61,247,1,0,0,
  	0,63,249,1,0,0,0,65,251,1,0,0,0,67,254,1,0,0,0,69,257,1,0,0,0,71,259,
  	1,0,0,0,73,261,1,0,0,0,75,263,1,0,0,0,77,265,1,0,0,0,79,267,1,0,0,0,81,
  	269,1,0,0,0,83,271,1,0,0,0,85,273,1,0,0,0,87,276,1,0,0,0,89,279,1,0,0,
  	0,91,281,1,0,0,0,93,283,1,0,0,0,95,286,1,0,0,0,97,290,1,0,0,0,99,296,
  	1,0,0,0,101,307,1,0,0,0,103,321,1,0,0,0,105,336,1,0,0,0,107,348,1,0,0,
  	0,109,350,1,0,0,0,111,352,1,0,0,0,113,354,1,0,0,0,115,377,1,0,0,0,117,
  	379,1,0,0,0,119,402,1,0,0,0,121,404,1,0,0,0,123,124,5,40,0,0,124,2,1,
  	0,0,0,125,126,5,41,0,0,126,4,1,0,0,0,127,128,5,101,0,0,128,129,5,120,
  	0,0,129,130,5,116,0,0,130,131,5,101,0,0,131,132,5,114,0,0,132,133,5,110,
  	0,0,133,6,1,0,0,0,134,135,5,67,0,0,135,8,1,0,0,0,136,137,5,123,0,0,137,
  	10,1,0,0,0,138,139,5,125,0,0,139,12,1,0,0,0,140,141,5,44,0,0,141,14,1,
  	0,0,0,142,143,5,46,0,0,143,144,5,46,0,0,144,145,5,46,0,0,145,16,1,0,0,
  	0,146,147,5,91,0,0,147,18,1,0,0,0,148,149,5,93,0,0,149,20,1,0,0,0,150,
  	151,5,105,0,0,151,152,5,110,0,0,152,153,5,116,0,0,153,22,1,0,0,0,154,
  	155,5,115,0,0,155,156,5,116,0,0,156,157,5,114,0,0,157,158,5,105,0,0,158,
  	159,5,110,0,0,159,160,5,103,0,0,160,24,1,0,0,0,161,162,5,102,0,0,162,
  	163,5,108,0,0,163,164,5,111,0,0,164,165,5,97,0,0,165,166,5,116,0,0,166,
  	26,1,0,0,0,167,168,5,98,0,0,168,169,5,111,0,0,169,170,5,111,0,0,170,171,
  	5,108,0,0,171,28,1,0,0,0,172,173,5,98,0,0,173,174,5,121,0,0,174,175,5,
  	116,0,0,175,176,5,101,0,0,176,30,1,0,0,0,177,178,5,61,0,0,178,32,1,0,
  	0,0,179,180,5,102,0,0,180,181,5,117,0,0,181,182,5,110,0,0,182,183,5,99,
  	0,0,183,34,1,0,0,0,184,185,5,114,0,0,185,186,5,101,0,0,186,187,5,116,
  	0,0,187,188,5,117,0,0,188,189,5,114,0,0,189,190,5,110,0,0,190,36,1,0,
  	0,0,191,192,5,118,0,0,192,193,5,111,0,0,193,194,5,105,0,0,194,195,5,100,
  	0,0,195,38,1,0,0,0,196,197,5,116,0,0,197,198,5,114,0,0,198,199,5,117,
  	0,0,199,200,5,101,0,0,200,40,1,0,0,0,201,202,5,102,0,0,202,203,5,97,0,
  	0,203,204,5,108,0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,42,1,0,0,
  	0,207,208,5,102,0,0,208,209,5,111,0,0,209,210,5,114,0,0,210,44,1,0,0,
  	0,211,212,5,98,0,0,212,213,5,114,0,0,213,214,5,101,0,0,214,215,5,97,0,
  	0,215,216,5,107,0,0,216,46,1,0,0,0,217,218,5,99,0,0,218,219,5,111,0,0,
  	219,220,5,110,0,0,220,221,5,116,0,0,221,222,5,105,0,0,222,223,5,110,0,
  	0,223,224,5,117,0,0,224,225,5,101,0,0,225,48,1,0,0,0,226,227,5,105,0,
  	0,227,228,5,102,0,0,228,50,1,0,0,0,229,230,5,101,0,0,230,231,5,108,0,
  	0,231,232,5,115,0,0,232,233,5,101,0,0,233,52,1,0,0,0,234,235,5,101,0,
  	0,235,236,5,108,0,0,236,237,5,105,0,0,237,238,5,102,0,0,238,54,1,0,0,
  	0,239,240,5,38,0,0,240,56,1,0,0,0,241,242,5,38,0,0,242,243,5,38,0,0,243,
  	58,1,0,0,0,244,245,5,124,0,0,245,246,5,124,0,0,246,60,1,0,0,0,247,248,
  	5,33,0,0,248,62,1,0,0,0,249,250,3,117,58,0,250,64,1,0,0,0,251,252,5,43,
  	0,0,252,253,5,43,0,0,253,66,1,0,0,0,254,255,5,45,0,0,255,256,5,45,0,0,
  	256,68,1,0,0,0,257,258,5,59,0,0,258,70,1,0,0,0,259,260,5,43,0,0,260,72,
  	1,0,0,0,261,262,5,45,0,0,262,74,1,0,0,0,263,264,3,63,31,0,264,76,1,0,
  	0,0,265,266,5,47,0,0,266,78,1,0,0,0,267,268,5,124,0,0,268,80,1,0,0,0,
  	269,270,5,94,0,0,270,82,1,0,0,0,271,272,5,126,0,0,272,84,1,0,0,0,273,
  	274,5,61,0,0,274,275,5,61,0,0,275,86,1,0,0,0,276,277,5,33,0,0,277,278,
  	5,61,0,0,278,88,1,0,0,0,279,280,5,62,0,0,280,90,1,0,0,0,281,282,5,60,
  	0,0,282,92,1,0,0,0,283,284,5,62,0,0,284,285,5,61,0,0,285,94,1,0,0,0,286,
  	287,5,60,0,0,287,288,5,61,0,0,288,96,1,0,0,0,289,291,7,0,0,0,290,289,
  	1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,
  	0,294,295,6,48,0,0,295,98,1,0,0,0,296,297,5,47,0,0,297,298,5,47,0,0,298,
  	302,1,0,0,0,299,301,8,1,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,1,
  	0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,6,49,1,
  	0,306,100,1,0,0,0,307,308,5,47,0,0,308,309,5,42,0,0,309,313,1,0,0,0,310,
  	312,9,0,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,314,1,0,0,0,313,311,1,
  	0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,42,0,0,317,318,5,47,0,
  	0,318,319,1,0,0,0,319,320,6,50,1,0,320,102,1,0,0,0,321,325,3,109,54,0,
  	322,324,3,107,53,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,
  	326,1,0,0,0,326,104,1,0,0,0,327,325,1,0,0,0,328,332,7,2,0,0,329,331,3,
  	111,55,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,
  	0,0,333,337,1,0,0,0,334,332,1,0,0,0,335,337,5,48,0,0,336,328,1,0,0,0,
  	336,335,1,0,0,0,337,344,1,0,0,0,338,340,5,46,0,0,339,341,3,111,55,0,340,
  	339,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,345,1,
  	0,0,0,344,338,1,0,0,0,344,345,1,0,0,0,345,106,1,0,0,0,346,349,3,109,54,
  	0,347,349,3,111,55,0,348,346,1,0,0,0,348,347,1,0,0,0,349,108,1,0,0,0,
  	350,351,7,3,0,0,351,110,1,0,0,0,352,353,7,4,0,0,353,112,1,0,0,0,354,355,
  	5,78,0,0,355,356,5,85,0,0,356,357,5,76,0,0,357,358,5,76,0,0,358,114,1,
  	0,0,0,359,364,5,34,0,0,360,363,8,5,0,0,361,363,3,119,59,0,362,360,1,0,
  	0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,
  	367,1,0,0,0,366,364,1,0,0,0,367,378,5,34,0,0,368,373,5,96,0,0,369,372,
  	8,5,0,0,370,372,3,119,59,0,371,369,1,0,0,0,371,370,1,0,0,0,372,375,1,
  	0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,
  	376,378,5,96,0,0,377,359,1,0,0,0,377,368,1,0,0,0,378,116,1,0,0,0,379,
  	380,5,42,0,0,380,118,1,0,0,0,381,382,5,92,0,0,382,403,7,6,0,0,383,388,
  	5,92,0,0,384,386,7,7,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,
  	0,0,387,389,7,8,0,0,388,385,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,
  	403,7,8,0,0,391,393,5,92,0,0,392,394,5,117,0,0,393,392,1,0,0,0,394,395,
  	1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,398,3,121,
  	60,0,398,399,3,121,60,0,399,400,3,121,60,0,400,401,3,121,60,0,401,403,
  	1,0,0,0,402,381,1,0,0,0,402,383,1,0,0,0,402,391,1,0,0,0,403,120,1,0,0,
  	0,404,405,7,9,0,0,405,122,1,0,0,0,19,0,292,302,313,325,332,336,342,344,
  	348,362,364,371,373,377,385,388,395,402,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  donglanglexerLexerStaticData = staticData.release();
}

}

DongLangLexer::DongLangLexer(CharStream *input) : Lexer(input) {
  DongLangLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *donglanglexerLexerStaticData->atn, donglanglexerLexerStaticData->decisionToDFA, donglanglexerLexerStaticData->sharedContextCache);
}

DongLangLexer::~DongLangLexer() {
  delete _interpreter;
}

std::string DongLangLexer::getGrammarFileName() const {
  return "DongLang.g4";
}

const std::vector<std::string>& DongLangLexer::getRuleNames() const {
  return donglanglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& DongLangLexer::getChannelNames() const {
  return donglanglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& DongLangLexer::getModeNames() const {
  return donglanglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& DongLangLexer::getVocabulary() const {
  return donglanglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView DongLangLexer::getSerializedATN() const {
  return donglanglexerLexerStaticData->serializedATN;
}

const atn::ATN& DongLangLexer::getATN() const {
  return *donglanglexerLexerStaticData->atn;
}




void DongLangLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  donglanglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(donglanglexerLexerOnceFlag, donglanglexerLexerInitialize);
#endif
}
